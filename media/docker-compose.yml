services:
  gluetun:
    image: qmcgaw/gluetun:latest
    container_name: gluetun
    cap_add: [NET_ADMIN]
    devices: ["/dev/net/tun:/dev/net/tun"]
    env_file: [./.env]
    environment:
      - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER}
      - VPN_TYPE=${VPN_TYPE}
      - FIREWALL=on
      - TZ=${TZ}
      #- VPN_MTU=1380
    volumes:
      - /docker/gluetun:/gluetun
    ports:
      - "8080:8080"  # qBittorrent WebUI through VPN
      - "8191:8191"  # FlareSolverr API
      # If your VPN supports PF, you can expose a BT port:
      # - "50413:50413"
      # - "50413:50413/udp"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1:9999/health"]
      interval: 10s
      timeout: 3s
      retries: 6

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    network_mode: "service:gluetun"
    env_file: [./.env]
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WEBUI_PORT=8080
    volumes:
      - /docker/qbittorrent:/config
      - /data:/data
    restart: unless-stopped
#    depends_on:
#      gluetun:
#        condition: service_healthy

  flaresolverr:
    image: flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    network_mode: "service:gluetun"
    env_file: [./.env]
    environment:
      - LOG_LEVEL=info
      - TZ=${TZ}
      # Optionally set a request timeout (in seconds)
      - CAPTCHA_SOLVER=none
      - HEADLESS=true
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy

  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    ports:
      - "8096:8096"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      # Optional but nice: expose the URL Jellyseerr/others can use
      # - JELLYFIN_PublishedServerUrl=http://jellyfin:8096
    volumes:
      - /docker/jellyfin:/config
      - /data/media:/data/media:ro
      # Intel iGPU (render node)
      - /dev/dri/renderD128:/dev/dri/renderD128
    # Add container to the host's "render" group (gid 992 you granted in LXC)
    group_add:
      - "992"
    restart: unless-stopped

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    ports: ["7878:7878"]
    environment: [ "PUID=${PUID}", "PGID=${PGID}", "TZ=${TZ}" ]
    volumes:
      - /docker/radarr:/config
      - /data:/data
    restart: unless-stopped

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    ports: ["8989:8989"]
    environment: [ "PUID=${PUID}", "PGID=${PGID}", "TZ=${TZ}" ]
    volumes:
      - /docker/sonarr:/config
      - /data:/data
    restart: unless-stopped

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    ports: ["6767:6767"]
    environment: [ "PUID=${PUID}", "PGID=${PGID}", "TZ=${TZ}" ]
    volumes:
      - /docker/bazarr:/config
      - /data:/data
    restart: unless-stopped

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    ports: ["9696:9696"]
    environment: [ "PUID=${PUID}", "PGID=${PGID}", "TZ=${TZ}" ]
    volumes:
      - /docker/prowlarr:/config
    restart: unless-stopped

  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    ports: ["5055:5055"]
    environment:
      - LOG_LEVEL=info
      - TZ=${TZ}
    volumes:
      - /docker/jellyseerr:/app/config
    restart: unless-stopped